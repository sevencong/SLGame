/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.ParserConfigurationException;

import main.KeyboardInput;

import org.xml.sax.SAXException;
import quest.InvalidQuestFileException;
import quest.Quest;
import worldMap.Map;

/**
 *
 * @author csuiei
 */
public class GuiOne extends javax.swing.JFrame implements Runnable {

	/**
	 * Creates new form GuiOne
	 */

	private Map map;
	private Quest quest;
	private BufferedImage background;

	public GuiOne() {
		map = new Map(575, 426, new ArrayList<int[]>());
		JFileChooser chooser = new JFileChooser();
		FileNameExtensionFilter filter = new FileNameExtensionFilter("Quest file", "que");
		chooser.setFileFilter(filter);
		chooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
		int returnVal = chooser.showOpenDialog(this);
		while (true) {
			if(returnVal == JFileChooser.APPROVE_OPTION) {
				try {
					System.out.println("Loading from " + chooser.getSelectedFile().getName());
					quest = new Quest(chooser.getSelectedFile().getName());
					break;
				} catch (IOException ex) {
					ex.printStackTrace();
					JOptionPane.showMessageDialog(this, "Invalid quest file, please don't do that again.");
					returnVal = chooser.showOpenDialog(this);
				} catch (ParserConfigurationException ex) {
					ex.printStackTrace();
					JOptionPane.showMessageDialog(this, "Invalid quest file, please don't do that again.");
					returnVal = chooser.showOpenDialog(this);
				} catch (SAXException ex) {
					ex.printStackTrace();
					JOptionPane.showMessageDialog(this, "Invalid quest file, please don't do that again.");
					returnVal = chooser.showOpenDialog(this);
				} catch (InvalidQuestFileException ex) {
					ex.printStackTrace();
					JOptionPane.showMessageDialog(this, "Invalid quest file, please don't do that again.");
					returnVal = chooser.showOpenDialog(this);
				}
			}
		}
		try {
			background = ImageIO.read(new File("background.jpg"));
			System.out.println("Background loaded");
		} catch (IOException e) {
			System.exit(1);
		}

		initComponents();
		refresh();
		background1.setImage(background);
		background1.addKeyListener(new KeyboardInput());
	}

	public void refresh() {
		WritableRaster pic = background.getRaster();
		char[][] info = map.getView();
		for (int x = 0; x < info.length; x++) {
			for (int y = 0; y < info.length; y++) {
				switch(info[x][y]) {
				case 'p':	pic.setRect(x, y, quest.getPartyPic().getRaster()); break;
				case 'q':	pic.setRect(x, y, quest.getMarkerPic().getRaster()); break;
				case 'r':	pic.setRect(x, y, quest.getPartyPic().getRaster()); pic.setRect(x, y, quest.getMarkerPic().getRaster()); break;
				default:	break;
				}
			}
		}
		background1.setImage(new BufferedImage(background.getColorModel(), pic, false, null) );
		repaint();
	}

	public boolean[] getDirection() {
		return ((KeyboardInput) background1.getKeyListeners()[0]).getDirection();
	}

	public void setVisible(boolean b) {
		super.setVisible(b);
		background1.grabFocus();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		abstractPainterBeanInfo1 = new org.jdesktop.swingx.painter.AbstractPainterBeanInfo();
		background1 = new org.jdesktop.swingx.JXImagePanel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		javax.swing.GroupLayout background1Layout = new javax.swing.GroupLayout(background1);
		background1.setLayout(background1Layout);
		background1Layout.setHorizontalGroup(
				background1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 400, Short.MAX_VALUE)
				);
		background1Layout.setVerticalGroup(
				background1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGap(0, 300, Short.MAX_VALUE)
				);

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(background1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(background1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
				);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/*
		 * Set the Nimbus look and feel
		 */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(GuiOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(GuiOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(GuiOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(GuiOne.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/*
		 * Create and display the form
		 */
		java.awt.EventQueue.invokeLater(new Runnable() {

			public void run() {
				new GuiOne().setVisible(true);
			}
		});
	}
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private org.jdesktop.swingx.painter.AbstractPainterBeanInfo abstractPainterBeanInfo1;
	private org.jdesktop.swingx.JXImagePanel background1;
	// End of variables declaration//GEN-END:variables

	@Override
	public void run() {
		// TODO Auto-generated method stub
		boolean[] dir;
		while (true) {
			while (!background1.hasFocus()) {

			}
			dir = getDirection();
			//                        System.out.println("Direction is " + Integer.toString(dir[2]?1:0 - (dir[1]?1:0)) + ", " + Integer.toString(dir[3]?1:0 - (dir[0]?1:0)));
			map.moveParty(dir[2]?1:0 - (dir[1]?1:0), dir[3]?1:0 - (dir[0]?1:0));
		}
	}
}
